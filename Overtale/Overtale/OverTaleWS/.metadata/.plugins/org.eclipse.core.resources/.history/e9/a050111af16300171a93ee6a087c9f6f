package game;

import java.io.IOException;
import java.util.ArrayList;

import bullet.BulletFactory;
import controllers.GameController;
import controllers.MenuController;
import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.Duration;

public class GameThread extends Service<Void> {
	private static final double MOUVEMENT = 4;
	public static boolean findujeu = false;
	public ArrayList<Joueur> joueurs = new ArrayList<Joueur>();
	public BulletFactory bulletFactory;
	public int tempsAttaque = 0;
	public SimpleIntegerProperty vague = new SimpleIntegerProperty(0);
	private int tempsfin=0;

	public GameThread() {
		bulletFactory = new BulletFactory();
		joueurs.add(new Joueur());
	}

	@Override
	protected Task<Void> createTask() {
		return new Task<Void>() {

			@Override
			protected Void call() throws Exception {
				while (!findujeu) {
					Platform.runLater(new Runnable() {
						@Override
						public void run() {
							tempsAttaque++;
							if (tempsAttaque >= -50 * Math.atan(vague.get() / 4 - 5) + 200) {
								listeAttaque();
								tempsAttaque = 0;
								vague.set(vague.get()+1);;
							}

							mouvementJoueur();
							dommageJoueur();
							
							if(joueursMorts()){
								findujeu=true;
								tempsfin++;
								if(tempsfin>=200){
									cancel();
								}
							}
						}

					});
					
					Thread.sleep(15);
				}
				return null;
			}

		};
	}
	
	private boolean joueursMorts(){
		int nombreMorts=0;
		for (int i = 0; i < joueurs.size(); i++) {
			if(joueurs.get(i).isMort()){
				joueurs.get(i).mort();
				nombreMorts++;
			}
		}
		if(nombreMorts>=joueurs.size()){
			return true;
		}else{
			return false;	
		}
	}
	
	private void listeAttaque() {
		if (vague.get() < 10) {
			int random = ((int) (Math.random() * 3));
			switch(random){
			case 0:
				bulletFactory.wallAttack(7+vague.get(), 1);
				break;
			case 1:
				bulletFactory.squareAttack(8+vague.get(), 1);
				break;
			case 2:
				bulletFactory.rainAttack(20, 1);
				break;
			}
			if(vague.get() == 10){
				joueurs.get(0).setPointVie(joueurs.get(0).getPointVie()+0.1);
			}
		} else if(vague.get() < 20) {
			int random = ((int) (Math.random() * 3));
			if(random == 0){
				bulletFactory.wallAttack(vague.get(), 2);
			}else
			if(random == 1){
				bulletFactory.squareAttack(vague.get(), 2);
				
			}else{
				bulletFactory.spearAttack(1, joueurs.get(0));
			}
			if(vague.get() == 20){
				joueurs.get(0).setPointVie(joueurs.get(0).getPointVie()+0.1);
			}
		}else
			if(vague.get() < 30){
			int random = ((int) (Math.random() * 2));
			if(random == 0){
				bulletFactory.rainAttack(20, 2);
			}else{
				bulletFactory.chercheurAttack(4, 4, joueurs.get(0));
			
			}
			if(vague.get() == 30){
				joueurs.get(0).setPointVie(joueurs.get(0).getPointVie()+0.1);
			}
		}else{
			bulletFactory.tempeteAttack(100, 1);
		}
		
	}

	public ArrayList<Joueur> getJoueurs() {
		return joueurs;
	}

	private void mouvementJoueur() {
		for (Joueur joueur : joueurs) {
			switch (joueur.getDirection()) {
			case 0:
				break;
			case 1:
				joueur.setPosX(joueur.getPosX() - MOUVEMENT);
				break;
			case 2:
				joueur.setPosX(joueur.getPosX() - 3.4);
				joueur.setPosY(joueur.getPosY() - 3.4);
				break;
			case 3:
				joueur.setPosY(joueur.getPosY() - MOUVEMENT);
				break;
			case 4:
				joueur.setPosX(joueur.getPosX() + 3.4);
				joueur.setPosY(joueur.getPosY() - 3.4);
				break;
			case 5:
				joueur.setPosX(joueur.getPosX() + MOUVEMENT);
				break;
			case 6:
				joueur.setPosX(joueur.getPosX() + 3.4);
				joueur.setPosY(joueur.getPosY() + 3.4);
				break;
			case 7:
				joueur.setPosY(joueur.getPosY() + MOUVEMENT);
				break;
			case 8:
				joueur.setPosX(joueur.getPosX() - 3.4);
				joueur.setPosY(joueur.getPosY() + 3.4);
				break;
			}
		}
	}

	public Group setGroupe() {
		return bulletFactory.getGroup();
	}

	private void dommageJoueur() {
		for (int i = 0; i < bulletFactory.getGroup().getChildren().size(); i++) {
			if (joueurs.get(0).getVulnerable()) {
				if (bulletFactory.getGroup().getChildren().get(i).getBoundsInParent().intersects(joueurs.get(0).getImage().getBoundsInParent())) {
					joueurs.get(0).setPointVie(joueurs.get(0).getPointVie() - 0.1);
					joueurs.get(0).setVulnerable(false);
					FadeTransition ft = new FadeTransition(Duration.millis(150), joueurs.get(0).getImage());
					ft.setFromValue(1.0);
					ft.setToValue(0);
					ft.setCycleCount(4);
					ft.setAutoReverse(true);
					ft.play();
					ft.setOnFinished(new EventHandler<ActionEvent>() {

						@Override
						public void handle(ActionEvent event) {
							FadeTransition ft = new FadeTransition(Duration.millis(200), joueurs.get(0).getImage());
							ft.setFromValue(0);
							ft.setToValue(1);
							ft.play();
							joueurs.get(0).setVulnerable(true);
						}});
				}
			}
		}
	}
}
